syntax = "proto2";
package gpb;
option optimize_for = LITE_RUNTIME;

/* A name/value pair. */
message Property {
  required string name = 1;
  required string value = 2;
}

/* Application process naming information. */
message APName {
  required string ap_name = 1;
  optional string ap_instance = 2;
  optional string ae_name = 3;
  optional string ae_instance = 4;
}

/* The constants to be used by EFCP. */
message DataTransferConstants {
  optional uint32 max_pdu_size = 1; /* The maximum size of a PDU, in bytes */
  optional uint32 address_width =
      2; /* The length of the address field in EFCP PDUs, in bytes */
  optional uint32 port_id_width =
      3; /* The length of the port_id field in EFCP PDUs, in bytes */
  optional uint32 cep_id_width = 4; /* The length of the Connection Endpoint Id
                                       field in EFCP PDUs, in bytes */
  optional uint32 qos_id_width =
      5; /* The length of the qos_id field in EFCP PDUs, in bytes */
  optional uint32 seq_num_width =
      6; /* The length of the seq_num field in EFCP PDUs, in bytes */
  optional uint32 length_width =
      7; /* The length of the length field in EFCP PDUs, in bytes */
  optional uint64 seq_rollover_thresh =
      8; /* The sequence number after which the Flow Allocator instance should
            create a new EFCP connection */
  optional uint32 max_pdu_lifetime =
      9; /* The maximum time a PDU can "live" within the DIF, in milliseconds */
  optional bool concatenation_enabled =
      10; /* True if multiple SDUs can be delimited and concatenated
             within a single PDU. */
  optional bool fragmentation_enabled =
      11; /* True if multiple SDUs can be fragmented and reassembled
             within a single PDU */
  optional bool integrity_enabled =
      12; /* True if the PDUs in this DIF have CRC, TTL, and/or encryption */
  optional uint32 max_rtx_time =
      13; /* The maximum time DTCP tries to keep retransmitting a PDU,
             before discarding it (i.e. R in delta-T) */
  optional uint32 max_ack_delay =
      14; /* The maximum time the receiving side of a DTCP connection will take
             to ACK a PDU once it has received it (i.e. A in delta-T) */
  optional uint32 rate_width = 15;  /* The length of the rate field in the FC
                                       PDUs (for rate based flow control) */
  optional uint32 frame_width = 16; /* The length of the frame field in the FC
                                       PDUs (for rate based flow control) */
  optional uint32 ctrl_seq_num_width =
      17; /* The length of the ctrl_seq_num
             field in EFCP(DTCP) PDUs, in bytes */
}

message PolicyDescr {                // Describes a policy
  optional string name = 1;          // The name of the policy
  optional string impl_name = 2;     // The name of the implementation of the
                                     // policy used in this DIF. Can be a
                                     // hierarchical name
  optional string version = 3;       // The version of the policy implementation
  repeated Property parameters = 4;  // The parameters of the policy
}

/* Window-based flow control configuration for an EFCP connection. */
message WindowBasedFlowCtrlConfig {
  /* Maximum length of the closed window queue (in PDUs). */
  optional uint64 max_cwq_len = 1;
  /* Initial size of the flow control window (RWE-LWE). */
  optional uint64 initial_credit = 2;
  /* Invoked when a Transfer PDU is received to give the receiving PM an
   * opportunity to update the flow control allocations. */
  optional PolicyDescr rcvr_flow_ctrl = 3;
  optional PolicyDescr tx_ctrl =
      4;  // This policy is used when there are conditions that warrant sending
          // fewer PDUs than allowed by the sliding window flow control, e.g.
          // the ECN bit is set.
}

message RateBasedFlowCtrlConfig {   // the rate-based flow control
                                    // configuration of a connection
  optional uint64 sender_rate = 1;  // the number of PDUs that may be sent in a
                                    // TimePeriod. Used with rate-based flow
                                    // control
  optional uint64 time_period =
      2;  // length of time in microseconds for pacing rate-based flow control
  optional PolicyDescr no_rate_slow_down =
      3;  // used to momentarily lower the send rate below the rate allowed
  optional PolicyDescr no_override_default_peak =
      4;  // Allows rate-based flow control to exceed its nominal rate
  optional PolicyDescr rate_reduction =
      5;  // Allows an alternate action when using rate-based flow control and
          // the number of free buffers is getting low
}

message FlowCtrlConfig {  // the flow control configuration of a connection
  optional bool window_based =
      1;  // indicates whether window-based flow control is in use
  optional WindowBasedFlowCtrlConfig window_based_config =
      2;  // the window-based flow control configuration
  optional bool rate_based =
      3;  // indicates whether rate-based flow control is in use
  optional RateBasedFlowCtrlConfig rate_based_config =
      4;  // the rate-based flow control configuration
  optional uint64 send_bytes_th =
      5;  // The number of free bytes below which flow control should slow or
          // block the user from doing any more Writes
  optional uint64 sent_bytes_perc_th =
      6;  // The percent of free bytes below, which flow control should slow or
          // block the user from doing any more Writes
  optional uint64 sent_buffers_th =
      7;  // The number of free buffers below which flow control should slow or
          // block the user from doing any more Writes
  optional uint64 rcv_bytes_th =
      8;  // The number of free bytes below which flow control does not move or
          // decreases the amount the Right Window Edge is moved
  optional uint64 rcv_bytes_perc_th =
      9;  // The number of free buffers at which flow control does not advance
          // or decreases the amount the Right Window Edge is moved.
  optional uint64 rcv_buffers_th =
      10;  // The percent of free buffers below which flow control should not
           // advance or decreases the amount the Right Window Edge is moved
  optional PolicyDescr closed_win =
      11;  // Determine the action to be taken when the receiver has not
           // extended more credit to allow the sender to send more PDUs
  optional PolicyDescr flow_ctrl_overrun =
      12;  // Determines what action to take if the receiver receives PDUs but
           // the credit or rate has been exceeded
  optional PolicyDescr reconcile_flow_ctrl =
      13;  // Invoked when both Credit and Rate based flow control are in use
           // and they disagree on whether the PM can send or receive data
  optional PolicyDescr receiving_flow_ctrl =
      14;  // Allows some discretion in when to send a Flow Control PDU when
           // there is no Retransmission Control
}

message RtxCtrlConfig {  // the rtx control configuration of a connection
  optional uint32 max_time_to_retry =
      1;  // Maximum time trying to retransmit a PDU (R)
  optional uint32 data_rxmsn_max = 2;  // the number of times the retransmission
                                       // of a PDU will be attempted before some
                                       // other action must be taken
  optional PolicyDescr rtx_timer_expiry =
      3;  // Executed by the sender when a Retransmission Timer Expires
  optional PolicyDescr sender_ack =
      4;  // Executed by the sender and provides the Sender with some discretion
          // on when PDUs may be deleted from the ReTransmissionQ
  optional PolicyDescr receiving_ack_list = 5;  //
  optional PolicyDescr rcvr_ack =
      6;  // Executed by the receiver of the PDU and provides some discretion in
          // the action taken
  optional PolicyDescr sending_ack =
      7;  // allows an alternate action when the A-Timer expires when DTCP is
          // present.
  optional PolicyDescr rcvr_ctrl_ack =
      8;  // Allows an alternate action when a Control Ack PDU is received
  optional uint32 initial_rtx_timeout =
      9;  // maximum time that a sender will wait before retransmitting the SDU
}

message DtcpConfig {  // configuration of DTCP for a connection
  optional bool flow_ctrl =
      1;  // indicates if flow control is enabled in this connection
  optional FlowCtrlConfig flow_ctrl_cfg = 2;  // the flow control configuration
  optional bool rtx_ctrl =
      3;  // inidicates if rtx control is enabled in this connection
  optional RtxCtrlConfig rtx_ctrl_cfg = 4;  // the rtx control configuration
  optional PolicyDescr lost_ctrl_pdu =
      5;  // Determines what action to take when the PM detects that a control
          // PDU (Ack or Flow Control) may have been lost
  optional PolicyDescr rtt_estimator =
      6;  // Executed by the sender to estimate the duration of the retx timer
}

message ConnPolicies {  // configuration of the policies and parameters
                        // of an EFCP connection
  optional bool dtcp_present = 1;  // indicates if this connection is using DTCP
  optional DtcpConfig dtcp_cfg =
      2;  // the DTCP Configuration for this connection
  optional PolicyDescr rcvr_timer_inact =
      3;  // If no PDUs arrive in this time period, the receiver should expect a
          // DRF in the next Transfer PDU
  optional PolicyDescr sender_timer_inact =
      4;  // This timer is used to detect long periods of no traffic, indicating
          // that a DRF should be sent
  optional PolicyDescr init_seq_num =
      5;  // allows some discretion in selecting the initial sequence number,
          // when DRF is going to be sent
  optional uint64 seq_num_rollover_th =
      6;  // the sequence number rollover threshold
  optional uint32 initial_a_timer =
      7;  // maximum time that a receiver will wait before sending an Ack
}

message DFTEntry {  // information about a
                    // directoryforwardingtable entry
  required APName appl_name = 1;
  required string ipcp_name = 2;  // The name of the hosting IPCP
  optional uint64 seqnum = 3;
}

message DFTSlice {  // carries information about
                    // directoryforwardingtable entries
  repeated DFTEntry entries = 1;
}

/* Information exchanged between the enrollee and the enroller.
 * Enrollee proposes address, and reports its lower difs.
 * Enroller returns the actual address and the EFCP data transfer
 * constants. */
message EnrollmentInfo {
  optional uint64 address = 1;
  repeated string lower_difs = 2;
  optional bool start_early = 3;
  optional DataTransferConstants dt_constants = 4;
}

message ConnId {  // information to identify a connection
  optional uint32 qosid =
      1;  // identifies the QoS cube under which this flow is classified
  optional uint32 src_cep = 2;  // identifies the source connection endpoint
                                // (unique within the source IPC process)
  optional uint32 dst_cep = 3;  // identifies the destination
                                // connection endpoint (unique within
                                // the destination IPC process)
}

/* FlowRequest contains the information necessary to setup a new flow. */
message FlowRequest {
  /* Name of the source (initiator) application. */
  required APName src_app = 1;
  /* Name of the destination (target) application. */
  required APName dst_app = 2;
  /* The port id allocated to this flow by the source IPC process. */
  required uint64 src_port = 3;
  /* The port id allocated to this flow by the destination IPC process. */
  optional uint64 dst_port = 4;
  /* The name of the source IPC process for this flow. */
  required string src_ipcp = 5;
  /* The name of the destination IPC process for this flow. */
  required string dst_ipcp = 6;
  /* The identifiers of all the connections that can be used to support
   * this flow during its lifetime. */
  repeated ConnId connections = 7;
  /* Identifies the index of the current active connection in the flow. */
  optional uint32 cur_conn_idx = 8;
  /* The state of this flow. */
  optional uint32 state = 9;
  /* The QoS parameters specified by the application process that requested
   * this flow. */
  optional QosSpec qos = 10;
  /* The configuration for the policies and parameters of this EFCP
   * connection. */
  optional ConnPolicies policies = 11;
  /* Access control information to authenticate the source application. */
  optional bytes access_control = 12;
  /* Maximum number of retries to create the flow before giving up. */
  optional uint32 max_create_flow_retries = 13;
  /* The current number of retries. */
  optional uint32 create_flow_retries = 14;
  /* While the search rules that generate the forwarding table should
   * allow for a natural termination condition, it seems wise to have
   * the means to enforce termination. */
  optional uint32 hop_cnt = 15;
}

message LowerFlow {  // Contains the information of a flow state object
  optional string local_node = 1;   // The name of the IPC Process
  optional string remote_node = 2;  // The name of the neighbor IPC Process
  optional uint32 cost = 3;         // The cost associated to the N-1 flow
  optional uint32 seqnum =
      4;  // A sequence number to be able to discard old information
  optional bool state = 5;       // Tells if the N-1 flow is up or down
  optional uint32 age = 6;       // Age of this FSO (in seconds)
  optional uint64 bw_total = 7;  // Total available bandwidth of the flow
  optional uint64 bw_free = 8;   // Free available bandwidth of the flow
}

message LowerFlowList {          // Contains the information of a flow service
  repeated LowerFlow flows = 1;  // A group of flow state objects
}

message NeighborCandidateList {  // carries information about all the neighbors
  repeated NeighborCandidate candidates = 1;
}

message NeighborCandidate {  // carries information about a neighbor
  optional string ap_name = 1;
  optional string ap_instance = 2;
  optional uint64 address = 3;
  repeated string lower_difs = 4;
}

message QosSpec {            // The QoS parameters requested by an application
                             // for a certain flow
  optional string name = 1;  // The name of the QoS cube, if known
  optional uint32 qosid =
      2;  // The if of the QoS cube, if known (-1 = not known)
  optional uint64 avg_bw =
      3;  // in bytes/s, a value of 0 indicates 'don't care'
  optional uint64 avg_sdu_rate =
      4;  // in PDUs/s, a value of 0 indicates 'don't care'
  optional uint32 peak_bw_duration =
      5;  // in ms, a value of 0 indicates 'don't care'
  optional uint32 peak_sdu_rate_duration =
      6;  // in ms, a value of 0 indicates 'don't care'
  optional double undetected_bit_error_rate =
      7;  // a value of 0 indicates 'don`t care'
  optional bool partial_delivery =
      8;  // indicates if partial delivery of SDUs is allowed or not
  optional bool in_order_delivery =
      9;  // indicates if SDUs have to be delivered in order
  optional int32 max_sdu_gap =
      10;  // indicates the maximum gap allowed in SDUs, a gap of N SDUs is
           // considered the same as all SDUs delivered. A value of -1 indicates
           // 'Any'
  optional uint32 delay = 11;   // in milliseconds, indicates the maximum delay
                                // allowed in this flow. A value of 0 indicates
                                // don't care
  optional uint32 jitter = 12;  // in milliseconds, indicates indicates the
                                // maximum jitter allowed in this flow. A value
                                // of 0 indicates don't care
  repeated Property extra_parameters = 13;  // the extra parameters specified
                                            // by the application process that
                                            // requested this flow
}

message AData {
  optional int32 src_addr = 1;
  optional int32 dst_addr = 2;
  optional bytes cdap_msg = 3;
}

message AddrAllocRequest {
  required string requestor = 1; /* Name of the requesting IPCP. */
  required uint64 address = 2;   /* Address to be allocated. */
}

message AddrAllocEntries {
  repeated AddrAllocRequest entries = 1;
}
